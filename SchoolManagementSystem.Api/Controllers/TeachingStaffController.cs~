using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using SchoolManagementSystem.Core.DTOs.Requests;
using SchoolManagementSystem.Core.DTOs.Responses;
using SchoolManagementSystem.Core.Entities;
using SchoolManagementSystem.Core.Interfaces;

// For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860

namespace SchoolManagementSystem.Api.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class TeachingStaffController : Controller
    {
        private readonly ITeachingStaff _teachingStaff;

        public TeachingStaffController(ITeachingStaff teachingStaff)
        {
            _teachingStaff = teachingStaff;
        }


        // GET: api/values
        [HttpGet]
        public IEnumerable<string> Get()
        {
            return new string[] { "value1", "value2" };
        }

        // GET api/values/5
        [HttpGet("{id}")]
        public string Get(int id)
        {
            return "value";
        }

        // POST api/values
        [HttpPost]
        public void Post([FromBody] string value)
        {
        }

        // PUT api/values/5
        [HttpPut("{id}")]
        public void Put(int id, [FromBody] string value)
        {
        }

        // DELETE api/values/5
        [HttpDelete("{id}")]
        public void Delete(int id)
        {
        }


        [HttpPost]
        public async Task<IActionResult> AddingTeachingStaff(TeachingStaffModel teachingStaff) {

            var teacher = await _teachingStaff.AddingTeachingStaff(teachingStaff);

            return Ok(teacher);
        }

        [HttpPut("{teacherID}")]
        public async Task<IActionResult> UpdateTeachingStaff(string TeacherID, TeachingStaffModel teachingStaff)
        { 

	    }

        [HttpGet]
        public async Task<IEnumerable<IActionResult>> GetAllTeachingStaffOfSpecificSubject(Subject Subject);

        [HttpGet]
        public async Task<IEnumerable<IActionResult>> GetAllTeachingStaffOfSpecificClass(Class Class);

        [HttpGet]
        public async Task<IEnumerable<IActionResult>> GetAllTeachingStaffOfSpecificSubjectAndClass(ClassAndSubjectModel classAndSubjectModel);

        [HttpGet]
        public async Task<IEnumerable<IActionResult>> GetAllTeachingStaffOfSpecificSubject_Or_Class(ClassAndSubjectModel classAndSubjectModel);

        [HttpGet]
        public async Task<IActionResult> GetAllTeachingStaffWithClassAndSubjectOnly()
        {
            var teachers = await _teachingStaff.GetAllTeachingStaffWithClassAndSubjectOnly();

            return Ok(teachers);
	    }

        [HttpGet]
        public async Task<IActionResult> GetAllTeachingStaff()
        {
            var teachers = await _teachingStaff.GetAllTeachingStaff();
            return Ok(teachers);
	    }


        [HttpGet("{teacherID}")]
        public async Task<IActionResult> GetAllSubjectOfTeacherByTeacherID(string TeacherID)
        {
            var subjects = await _teachingStaff.GetAllSubjectOfTeacherByTeacherID(TeacherID);

            return Ok(subjects);
	    }

        [HttpGet("{teacherID}")]
        public async Task<IActionResult> GetAllClassOfTeacherByTeacherID(string TeacherID)
        {
            var classes = await _teachingStaff.GetAllSubjectOfTeacherByTeacherID(TeacherID);

            return Ok(classes);
        }

        [HttpGet]
        public async Task<IActionResult> GetTeachingStaffByTeacherID(string TeacherID);

        [HttpDelete("{teacherID}")]
        public async Task<IActionResult> DeleteTeachingByID(string TeacherID)
        {
            await _teachingStaff.DeleteTeachingByID(TeacherID);

            return NoContent();
        }

        [HttpPost]
        public async Task<IActionResult> AssignSubjectByTeacherID(AddDataModel addSubjectModel);

        [HttpPost]
        public async Task<IActionResult> AssignClassByTeacherID(AddDataModel addClass);

    }
}

//[ApiController]
//[Route("api/users")]
//public class UserController : ControllerBase
//{
//    private readonly IUserService _userService;

//    public UserController(IUserService userService)
//    {
//        _userService = userService;
//    }

//    [HttpGet("{userId}")]
//    public async Task<IActionResult> GetUserById(string userId)
//    {
//        var user = await _userService.GetUserById(userId);
//        return Ok(user);
//    }

//    [HttpGet]
//    public async Task<IActionResult> GetAllUsers()
//    {
//        var users = await _userService.GetAllUsers();
//        return Ok(users);
//    }

//    [HttpPost]
//    public async Task<IActionResult> CreateUser(UserModel userModel)
//    {
//        userModel.UserId = Guid.NewGuid(); // Generate a new Guid for the user
//        var createdUser = await _userService.CreateUser(userModel);
//        return CreatedAtAction(nameof(GetUserById), new { userId = createdUser.UserId }, createdUser);
//    }


//    [HttpPut("{userId}")]
//    public async Task<IActionResult> UpdateUser(string userId, UserModel userModel)
//    {
//        var updatedUser = await _userService.UpdateUser(userId, userModel);
//        return Ok(updatedUser);
//    }

//    [HttpDelete("{userId}")]
//    public async Task<IActionResult> DeleteUser(string userId)
//    {
//        await _userService.DeleteUser(userId);
//        return NoContent();
//    }
//}

